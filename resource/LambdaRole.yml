Type: AWS::IAM::Role
Properties:
  AssumeRolePolicyDocument:
    Statement:
    - Effect: Allow
      Action: sts:AssumeRole
      Principal:
        Service: lambda.amazonaws.com
    Version: '2012-10-17'
  Policies:
    - PolicyName: DynamoDBWriteAccess
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - 'Fn::Join':
                  - ':'
                  -
                    - 'arn:aws:logs'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*:*:*'
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - ${self:custom.SavingTable.arn}
                - !Join ['/', [ '${self:custom.SavingTable.arn}', 'index', 'userId' ]]
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                'Fn::GetAtt': [ UserPool, Arn ]